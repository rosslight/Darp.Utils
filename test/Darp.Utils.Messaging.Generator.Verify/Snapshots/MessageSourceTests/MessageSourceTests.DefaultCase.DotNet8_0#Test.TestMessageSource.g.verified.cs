//HintName: Test.TestMessageSource.g.cs
// <auto-generated/>
#nullable enable
#pragma warning disable CS0618 // Suppress obsolete

namespace Test
{
    partial class TestMessageSource : global::Darp.Utils.Messaging.IMessageSource
    {
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Darp.Utils.Messaging.Generator", "GeneratorVersion")]
        [global::System.Obsolete("This field is not intended to be used in use code")]
        private readonly global::System.Collections.Generic.List<global::Darp.Utils.Messaging.IMessageSink> ___messageSinks =
            new global::System.Collections.Generic.List<global::Darp.Utils.Messaging.IMessageSink>();

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Darp.Utils.Messaging.Generator", "GeneratorVersion")]
        [global::System.Obsolete("This field is not intended to be used in use code")]
        private readonly object ___lock = new object();

        /// <summary> Publish a new message </summary>
        /// <param name="message"> The message to be published </param>
        /// <typeparam name="T"> The type of the message to be published </typeparam>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Darp.Utils.Messaging.Generator", "GeneratorVersion")]
        private void PublishMessage<T>(in T message)
        {
            lock (___lock)
            {
                // Reversed loop in case a subscriber disconnects while .Publish() is called
                for (var index = ___messageSinks.Count - 1; index >= 0; index--)
                {
                    global::Darp.Utils.Messaging.IMessageSink eventReceiver = ___messageSinks[index];
                    if (eventReceiver is global::Darp.Utils.Messaging.IMessageSink<T> receiver)
                        receiver.Publish(message);
                    else if (eventReceiver is global::Darp.Utils.Messaging.IAnyMessageSink anyReceiver)
                        anyReceiver.Publish(message);
                }
            }
        }

        /// <inheritdoc />
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Darp.Utils.Messaging.Generator", "GeneratorVersion")]
        public global::System.IDisposable Subscribe(global::Darp.Utils.Messaging.IMessageSink sink)
        {
            lock (___lock)
            {
                ___messageSinks.Insert(0, sink);
                return global::Darp.Utils.Messaging.FuncDisposable.Create(
                    (Lock: ___lock, Sinks: ___messageSinks, Sink: sink),
                    state =>
                    {
                        lock (state.Lock)
                            state.Sinks.Remove(state.Sink);
                    }
                );
            }
        }
    }
}
