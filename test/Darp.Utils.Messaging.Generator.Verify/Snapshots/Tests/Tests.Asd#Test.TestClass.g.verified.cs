//HintName: Test.TestClass.g.cs
// <auto-generated/>
#nullable enable

namespace Test
{
    partial class TestClass : global::Darp.Utils.Messaging.IMessageSinkProvider
    {
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        private ___MessageSink? ___lazyMessageSink;

        /// <inheritdoc />
        public global::Darp.Utils.Messaging.IMessageSink GetMessageSink()
        {
            return ___lazyMessageSink ??= new ___MessageSink(this);
        }

        private sealed class ___MessageSink
            : global::Darp.Utils.Messaging.IMessageSink<int>, global::Darp.Utils.Messaging.IMessageSink<global::System.ReadOnlySpan<byte>>, global::Darp.Utils.Messaging.IAnyMessageSink
        {
            private readonly TestClass _parent;

            public ___MessageSink(TestClass parent)
            {
                _parent = parent;
            }

            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public void Publish(in int message)
            {
                _parent.OnInt(message);
                OnIntStatic(message);
            }
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public void Publish(in global::System.ReadOnlySpan<byte> message)
            {
                _parent.OnSpan(message);
            }
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public void Publish<T>(in T message)
#if NET9_0_OR_GREATER
                where T : allows ref struct
#endif
            {
                _parent.OnAny(message);
            }
        }
    }
}
