//HintName: Test.TestSubject_Source.g.cs
// <auto-generated/>
#nullable enable
#pragma warning disable CS0618 // Suppress obsolete

namespace Test
{
    partial class TestSubject : global::Darp.Utils.Messaging.IMessageSource
    {
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Darp.Utils.Messaging.Generator", "GeneratorVersion")]
        [global::System.Obsolete("This field is not intended to be used in use code")]
        private global::System.Collections.Immutable.ImmutableArray<global::Darp.Utils.Messaging.IMessageSink> ___messageSinks =
            global::System.Collections.Immutable.ImmutableArray<global::Darp.Utils.Messaging.IMessageSink>.Empty;

        /// <summary> Publish a new message </summary>
        /// <param name="message"> The message to be published </param>
        /// <typeparam name="T"> The type of the message to be published </typeparam>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Darp.Utils.Messaging.Generator", "GeneratorVersion")]
        private void PublishMessage<T>(in T message) where T : allows ref struct
        {
            foreach (global::Darp.Utils.Messaging.IMessageSink eventReceiver in ___messageSinks)
            {
                if (eventReceiver is global::Darp.Utils.Messaging.IMessageSink<T> receiver)
                    receiver.Publish(message);
                else if (eventReceiver is global::Darp.Utils.Messaging.IAnyMessageSink anyReceiver)
                    anyReceiver.Publish(message);
            }
        }

        /// <inheritdoc />
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Darp.Utils.Messaging.Generator", "GeneratorVersion")]
        public global::System.IDisposable Subscribe(global::Darp.Utils.Messaging.IMessageSink sink)
        {
            ___messageSinks = ___messageSinks.Add(sink);
            return global::Darp.Utils.Messaging.FuncDisposable.Create(
                (Self: this, Sink: sink),
                state =>
                {
                    state.Self.___messageSinks = state.Self.___messageSinks.Remove(state.Sink);
                }
            );
        }
    }
}
